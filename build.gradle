/*
 * Gradle Configuration File
 *
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.2.1/userguide/tutorial_java_projects.html
 */

plugins {
    id "com.github.kt3k.coveralls" version "2.4.0"
}

allprojects {

    version = 'V1.1.0ea'

    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    checkstyle {
        toolVersion = '6.19'
        sourceSets = [project.sourceSets.main]
    }
    apply plugin: 'pmd'
    apply plugin: 'findbugs'
    findbugs {
        excludeFilter = file("${projectDir}/config/findbugs/excludeFilter.xml")
    }
    apply plugin: 'jacoco'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://repo.eclipse.org/content/repositories/egit-releases/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }

    project.ext {
        controlsFxVersion = '8.40.10'
        guavaVersion = '19.0'
        jacksonVersion = '2.7.0'
        jacksonDataTypeVersion = '2.7.4'
        jKeyMasterVersion = '1.2'
        jxBrowserVersion = '6.4'
        junitVersion = '4.12'
        log4jVersion = '2.6'
        mockitoVersion = '1+'
        mockServerVersion = '3.10.1'
        powermockVersion = '1.6.5'
        testFxVersion = '3.1.0'
        monocleVersion = '1.8.0_20'
        slf4jSimpleVersion = '1.6.4'
        commonsIoVersion = '2.4'

        mainAppArchiveName = 'resource-' + project.version + '.jar'
        jarUpdaterDestDir = 'src/main/resources/updater'
        jarUpdaterArchiveName = 'jarUpdater.jar'
    }

    jacocoTestReport {
        reports {
            xml.enabled false
            csv.enabled false
            html.destination "${buildDir}/jacocoHtml"
        }
    }

    sourceSets {
        main {
            java {
                srcDir 'src/main/java'
                exclude('hubturbo/updater/**/*')
            }
            resources {
                srcDir 'src/main/resources'
            }
        }
        installer {
            java {
                srcDir 'src/main/java/'
                include('hubturbo/updater/**/*')
                exclude('hubturbo/updater/UpdateDataGenerator.java')
                include('address/util/FileUtil.java')
                include('address/util/OsDetector.java')
                include('address/util/ProgressAwareInputStream.java')
                include('address/util/JsonUtil.java')
                include('address/updater/VersionDescriptor.java')
                include('address/updater/LibraryDescriptor.java')
                include('address/util/AppLogger.java')
                include('address/util/LoggerManager.java')
                include('address/util/Config.java')
                include('address/events/BaseEvent.java')
                include('hubturbo/embeddedbrowser/BrowserType.java')
            }
            resources {
                srcDir jar.getArchivePath().getParent()
                include(project.ext.mainAppArchiveName)
                include('lib/*')
                exclude('lib/jxbrowser-*-*.jar') // platform specific jxbrowser
            }
        }
        generateUpdateData {
            java {
                srcDir 'src/main/java/'
            }
        }
    }

    dependencies {
        compile "org.apache.logging.log4j:log4j-api:$log4jVersion"
        compile "org.apache.logging.log4j:log4j-core:$log4jVersion"
        compile "org.slf4j:slf4j-simple:$slf4jSimpleVersion" // Required to suppress warning, for jkeymaster, see http://www.slf4j.org/codes.html#StaticLoggerBinder
        compile "commons-io:commons-io:$commonsIoVersion"
        compile "org.controlsfx:controlsfx:$controlsFxVersion"
        compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonDataTypeVersion"
        compile "com.google.guava:guava:$guavaVersion"
        compile "org.controlsfx:controlsfx:$controlsFxVersion"
        compile "com.github.tulskiy:jkeymaster:$jKeyMasterVersion"
        runtime files('lib/jxbrowser-6.4.jar', 'lib/jxbrowser-linux32-6.4.jar', 'lib/jxbrowser-linux64-6.4.jar', 'lib/jxbrowser-mac-6.4.jar', 'jxbrowser-win-6.4.jar', 'licence.jar')
        compile fileTree(dir: 'lib', include: '*.jar')

        testCompile "junit:junit:$junitVersion"
        testCompile "org.testfx:testfx-core:4.0.+"
        testCompile "org.testfx:testfx-junit:4.0.+"
        testCompile "org.testfx:testfx-legacy:4.0.+", {
            exclude group: "junit", module: "junit"
        }
        testCompile "org.mockito:mockito-core:$mockitoVersion"
        testCompile "org.powermock:powermock-api-mockito:$powermockVersion"
        testCompile "org.powermock:powermock-module-junit4:$powermockVersion"
        testCompile "org.testfx:openjfx-monocle:$monocleVersion"

        installerCompile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
        installerCompile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonDataTypeVersion"
        installerCompile "org.apache.logging.log4j:log4j-api:$log4jVersion"
        installerCompile "org.apache.logging.log4j:log4j-core:$log4jVersion"
    }

    configurations {
        generateUpdateDataCompile {
            extendsFrom compile
        }
    }

    task generateUpdateData(type: JavaExec) {
        group = "Release"

        def arguments = project.ext.mainAppArchiveName + " ";
        arguments += configurations.runtime.files.collect { "$it.name" }.join(" ")

        classpath = sourceSets.generateUpdateData.runtimeClasspath

        main = 'hubturbo.updater.UpdateDataGenerator'

        args arguments.split()
    }

    task removeCurrentJarUpdater(type: Delete) {
        group = "Release"

        delete project.ext.jarUpdaterDestDir + '/' + project.ext.jarUpdaterArchiveName
    }

    task createJarUpdater(type: Jar) {
        group = "Release"

        manifest {
            attributes 'Implementation-Title': 'Jar Updater',
                    'Implementation-Version': '1.0',
                    'Main-Class': 'address.updater.JarUpdater',
                    // Add required JAR libraries into classpath
                    'Class-Path': configurations.runtime.files.collect { "../lib/${it.name}" }.join(" ")
        }

        archiveName = project.ext.jarUpdaterArchiveName
        destinationDir = file(project.ext.jarUpdaterDestDir)

        // Specify classes needed for Jar Updater
        from(sourceSets.main.output.resourcesDir) {
            include 'log4j2.json'
        }
        from sourceSets.main.output
        exclude '**/jarUpdater.jar'
    }

    createJarUpdater.dependsOn clean
    createJarUpdater.dependsOn removeCurrentJarUpdater

    task copyDependencyLibrariesToReleaseDir(type: Copy) {
        group = "Release"

        from configurations.compile
        into file(jar.getArchivePath().getParent() + '/lib')
    }


    task addJarUpdaterToMainApp(type: Copy) {
        group = "Release"
        from(sourceSets.main.resources.srcDirs) {
            include 'updater/jarUpdater.jar'
        }
        into sourceSets.main.output.resourcesDir
    }

    addJarUpdaterToMainApp.dependsOn createJarUpdater

    jar {
        manifest {
            attributes 'Main-Class': 'address.MainApp',
                    // Add required JAR libraries into classpath
                    'Class-Path': configurations.runtime.files.collect { "lib/${it.name}" }.join(" ")

        }
        archiveName = project.ext.mainAppArchiveName
        from(rootDir) {
            include 'UpdateData.json'
        }
    }

    jar.dependsOn copyDependencyLibrariesToReleaseDir
    jar.dependsOn addJarUpdaterToMainApp


    task createMainAppExecutable(dependsOn: jar) {
        group = "Release"

        doLast {
            println "A guide to create a release (after running this task)"
            println "====================================================="
            println "(temp) to enable update, put UpdateData.json into update/ of the main executable"
        }
    }

    createMainAppExecutable.dependsOn clean

    task createInstallerJar(type: Jar) {
        group = "Release"

        from sourceSets.installer.output
        from(rootDir) {
            include 'UpdateData.json'
        }

        manifest {
            attributes 'Implementation-Title': 'Addressbook',
                    'Implementation-Version': '1.0',
                    'Main-Class': 'hubturbo.updater.Installer',
                    'Class-Path': configurations.installerRuntime.files.collect { "lib/${it.name}" }.join(" ")
        }

        archiveName = "addressbook.jar"
    }

    jacoco {
        toolVersion = "0.7.5.201505241946"
    }

    createInstallerJar.dependsOn createMainAppExecutable
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task coverage(type: JacocoReport) {
    sourceDirectories = files(allprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(allprojects.sourceSets.main.output)
    executionData = files(allprojects.jacocoTestReport.executionData)
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/*.jar'])
        })
    }
    reports {
        html.enabled = true
        xml.enabled = true
    }
}

coveralls {
    sourceDirs = allprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/coverage/coverage.xml"
}

tasks.coveralls {
    dependsOn coverage
    onlyIf { System.env.'CI' }
}

task checkStyle { // A dummy task to run a set of tasks
}

class AddressBookTest extends Test {
    public AddressBookTest() {
    	  forkEvery = 1
        systemProperty 'testfx.setup.timeout', '60000'
    }

    public void setHeadless() {
        systemProperty 'java.awt.robot', 'true'
        systemProperty 'testfx.robot', 'glass'
        systemProperty 'testfx.headless', 'true'
        systemProperty 'prism.order', 'sw'
        systemProperty 'prism.text', 't2k'
    }
}

task guiTests(type: AddressBookTest) {
    include 'guitests/**'
    jacoco {
        destinationFile = new File("${buildDir}/jacoco/test.exec")
    }
}

task guiUnitTests(type: AddressBookTest) {
    include 'guiunittests/**'
    jacoco {
        destinationFile = new File("${buildDir}/jacoco/test.exec")
    }
}

task unitTests(type: AddressBookTest) {
    include 'address/**'
    jacoco {
        destinationFile = new File("${buildDir}/jacoco/test.exec")
    }
}

task allTests(type: AddressBookTest) {
    jacoco {
        destinationFile = new File("${buildDir}/jacoco/test.exec")
    }
}

task headless << {
    println "Setting headless mode properties."
    guiTests.setHeadless()
    guiUnitTests.setHeadless()
    unitTests.setHeadless()
    allTests.setHeadless()
}

// Makes sure that headless properties are set before running tests
unitTests.mustRunAfter headless
guiUnitTests.mustRunAfter headless
guiTests.mustRunAfter headless
allTests.mustRunAfter headless

headless.shouldRunAfter checkStyle
unitTests.shouldRunAfter checkStyle
guiUnitTests.shouldRunAfter checkStyle
guiTests.shouldRunAfter checkStyle
allTests.shouldRunAfter checkStyle

checkStyle.shouldRunAfter clean
checkStyle.dependsOn checkstyleMain, checkstyleTest, findbugsMain, findbugsTest, pmdMain, pmdTest

defaultTasks 'clean', 'headless', 'allTests', 'coverage'
