/*
 * Gradle Configuration File
 *
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.2.1/userguide/tutorial_java_projects.html
 */

plugins {
    id "com.github.kt3k.coveralls" version "2.4.0"
}

allprojects {

    version = 'V1.3.0ea'

    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    checkstyle {
        toolVersion = '6.19'
        sourceSets = [project.sourceSets.main]
    }
    apply plugin: 'pmd'
    apply plugin: 'findbugs'
    findbugs {
        excludeFilter = file("${projectDir}/config/findbugs/excludeFilter.xml")
    }
    apply plugin: 'jacoco'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://repo.eclipse.org/content/repositories/egit-releases/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "http://maven.teamdev.com/repository/products" }
    }

    // This part is similar to global variables
    // Access them by using double-quoted strings (GStrings) and referencing by $ e.g. "Variable contains $Variable"
    project.ext {
        controlsFxVersion = '8.40.10'
        guavaVersion = '19.0'
        jacksonVersion = '2.7.0'
        jacksonDataTypeVersion = '2.7.4'
        jKeyMasterVersion = '1.2'
        jxBrowserVersion = '6.4'
        junitVersion = '4.12'
        log4jVersion = '2.6'
        mockitoVersion = '1+'
        mockServerVersion = '3.10.1'
        powermockVersion = '1.6.5'
        testFxVersion = '3.1.0'
        monocleVersion = '1.8.0_20'
        slf4jSimpleVersion = '1.6.4'
        commonsIoVersion = '2.4'

        commonsArchiveName = 'commons.jar'

        updateMigratorArchiveName = 'updateMigrator.jar'
        updateMigratorMainClass = 'hubturbo.updater.UpdateMigrator'
        updateMigratorDestinationDir = 'src/main/resources/updater' // Update the way updater locates updateMigrator.jar in Updater.java

        updaterArchiveName = 'updater.jar'

        mainAppArchiveName = 'resource-' + project.version + '.jar'
        mainAppMainClass = 'address.MainApp'

        installerArchiveName = 'addressbook.jar'
        installerMainClass = 'hubturbo.installer.Launcher'

        licenceArchiveName = 'licence.jar'

        generateVersionDataMainClass = 'hubturbo.installer.VersionDataGenerator'
        libDir = 'lib'
    }

    jacocoTestReport {
        reports {
            xml.enabled false
            csv.enabled false
            html.destination "${buildDir}/jacocoHtml"
        }
    }

    sourceSets {
        main {
            java {
                srcDir 'src/main/java'
                include('address/**/*')
                include('hubturbo/embeddedbrowser/**/*')
                include('hubturbo/EmbeddedBrowser.java')
            }
            resources {
                srcDir 'src/main/resources'
            }
        }
        updater {
            java {
                srcDir 'src/main/java'
                include('hubturbo/updater/**/*')
                include('address/updater/**/*')
                include('address/util/OsDetector.java')
                include('address/util/Version.java')
                include('address/util/VersionData.java')
                include('address/util/LibraryDescriptor.java')
            }
            resources {
                srcDir 'src/main/resources'
                include('updater/updateMigrator.jar')
            }
        }
        commons {
            java {
                srcDir 'src/main/java'
                include('commons/**/*')
            }
        }
        updateMigrator {
            java {
                srcDir 'src/main/java'
                include('hubturbo/updater/LocalUpdateSpecificationHelper.java')
                include('hubturbo/updater/LocalUpdateSpecification.java')
                include('hubturbo/updater/UpdateMigrator.java')
            }
            resources {
                srcDir 'src/main/resources'
                include('log4j2.json')
            }
        }
        installer {
            java {
                srcDir 'src/main/java/'
                include('hubturbo/embeddedbrowser/BrowserType.java')
                include('hubturbo/installer/**/*')
                exclude('hubturbo/installer/VersionDataGenerator.java')
                include('address/events/BaseEvent.java')
                include('address/util/OsDetector.java')
                include('address/util/Version.java')
                include('address/util/VersionData.java')
                include('address/util/LibraryDescriptor.java')
                include('address/util/ProgressAwareInputStream.java')
                include('address/util/AppLogger.java')
                include('address/util/LoggerManager.java')
                include('address/util/Config.java')
                include('commons/FileUtil.java')
                include('commons/JsonUtil.java')
            }
            resources {
                srcDir "."
                include("$libDir/*")
                exclude("$libDir/jxbrowser-*-*.jar") // platform-specific jxbrowser
                include('VersionData.json')
            }
        }
        generateVersionData {
            java {
                srcDir 'src/main/java/'
            }
        }
    }

    dependencies {
        compile "org.apache.logging.log4j:log4j-api:$log4jVersion"
        compile "org.apache.logging.log4j:log4j-core:$log4jVersion"
        compile "org.slf4j:slf4j-simple:$slf4jSimpleVersion" // Required to suppress warning, for jkeymaster, see http://www.slf4j.org/codes.html#StaticLoggerBinder
        compile "commons-io:commons-io:$commonsIoVersion"
        compile "org.controlsfx:controlsfx:$controlsFxVersion"
        compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonDataTypeVersion"
        compile "com.google.guava:guava:$guavaVersion"
        compile "com.teamdev.jxbrowser:jxbrowser-win:$jxBrowserVersion"
        compile "com.teamdev.jxbrowser:jxbrowser-mac:$jxBrowserVersion"
        compile "com.teamdev.jxbrowser:jxbrowser-linux32:$jxBrowserVersion"
        compile "com.teamdev.jxbrowser:jxbrowser-linux64:$jxBrowserVersion"
        compile "org.controlsfx:controlsfx:$controlsFxVersion"
        compile "com.github.tulskiy:jkeymaster:$jKeyMasterVersion"
        compile files("$libDir/$licenceArchiveName")
        compile files("$libDir/$commonsArchiveName")
        compile files("$libDir/$updaterArchiveName")

        testCompile "junit:junit:$junitVersion"
        testCompile "org.testfx:testfx-core:4.0.+"
        testCompile "org.testfx:testfx-junit:4.0.+"
        testCompile "org.testfx:testfx-legacy:4.0.+", {
            exclude group: "junit", module: "junit"
        }
        testCompile "org.mockito:mockito-core:$mockitoVersion"
        testCompile "org.powermock:powermock-api-mockito:$powermockVersion"
        testCompile "org.powermock:powermock-module-junit4:$powermockVersion"
        testCompile "org.testfx:openjfx-monocle:$monocleVersion"

        installerCompile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
        installerCompile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonDataTypeVersion"
        installerCompile "org.apache.logging.log4j:log4j-api:$log4jVersion"
        installerCompile "org.apache.logging.log4j:log4j-core:$log4jVersion"

        updaterCompile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
        updaterCompile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonDataTypeVersion"
        updaterCompile "org.apache.logging.log4j:log4j-api:$log4jVersion"
        updaterCompile "org.apache.logging.log4j:log4j-core:$log4jVersion"
        updaterCompile files("$libDir/$commonsArchiveName")

        updateMigratorCompile files("$libDir/$commonsArchiveName")

        commonsCompile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
        commonsCompile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonDataTypeVersion"
        commonsCompile "org.apache.logging.log4j:log4j-api:$log4jVersion"
        commonsCompile "org.apache.logging.log4j:log4j-core:$log4jVersion"
    }

    configurations {
        generateVersionDataCompile {
            extendsFrom compile
        }
    }

    task copyAllDependenciesToLibrary(type: Copy) {
        from(configurations.compile) {
            exclude("$licenceArchiveName")
        }
        into "$libDir/"
    }

    // Compile commons.jar
    task createCommonsJar(type: Jar) {
        archiveName = "$commonsArchiveName"

        from sourceSets.commons.output
        destinationDir = file("$libDir/")
    }
    createCommonsJar.dependsOn copyAllDependenciesToLibrary

    // Compiles updateMigrator.jar
    task createUpdateMigratorJar(type: Jar) {
        archiveName = "$updateMigratorArchiveName"

        manifest {
            attributes "Main-Class": "$updateMigratorMainClass"
        }
        from sourceSets.updateMigrator.output
        destinationDir = file("$updateMigratorDestinationDir")
    }
    createUpdateMigratorJar.dependsOn createCommonsJar // Update migrator requires commons.jar dependency

    // Creates updater.jar
    task createUpdaterJar(type: Jar) {
        archiveName = "$updaterArchiveName"

        from sourceSets.updater.output
        destinationDir = file("$libDir/")
    }
    createUpdaterJar.dependsOn createUpdateMigratorJar

    // Main application jar
    jar {
        archiveName = "$mainAppArchiveName"

        manifest {
            attributes "Main-Class": "$mainAppMainClass",
                        "Class-Path": configurations.runtime.files.collect { "$libDir/${it.name}" }.join(" ")
        }
        from sourceSets.main.output
        from(rootDir) {
            include "VersionData.json"
        }
        from(tasks.createUpdaterJar.destinationDir) {
            include "$updaterArchiveName"
        }
        destinationDir = file("$libDir/")
    }
    jar.dependsOn createUpdaterJar
    compileJava.mustRunAfter createUpdaterJar // jar adds compileJava, but it runs at the beginning (which fails without updater.jar)
                                              // delay this until updater.jar is created

    // Creates the installer, which will pack necessary classes for installation and all dependencies found in lib/
    task createInstallerJar(type: Jar) {
        archiveName = "$installerArchiveName"

        manifest {
            attributes "Main-Class": "$installerMainClass",
                       "Class-Path": configurations.installerRuntime.files.collect { "$libDir/${it.name}" }.join(" ")
        }
        from sourceSets.installer.output
    }
    createInstallerJar.dependsOn jar
    compileInstallerJava.mustRunAfter jar // Compile installer only after its dependencies & resources are done

    task generateVersionData(type: JavaExec) {
        main = "$generateVersionDataMainClass"
        def arguments = "$mainAppArchiveName" + configurations.runtime.files.collect { "$it.name" }.join(" ")
        classpath = sourceSets.generateVersionData.runtimeClasspath
        args arguments.split()
    }

    jacoco {
        toolVersion = "0.7.5.201505241946"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task coverage(type: JacocoReport) {
    sourceDirectories = files(allprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(allprojects.sourceSets.main.output)
    executionData = files(allprojects.jacocoTestReport.executionData)
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/*.jar'])
        })
    }
    reports {
        html.enabled = true
        xml.enabled = true
    }
}

coveralls {
    sourceDirs = allprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/coverage/coverage.xml"
}

tasks.coveralls {
    dependsOn coverage
    onlyIf { System.env.'CI' }
}

task checkStyle { // A dummy task to run a set of tasks
}

class AddressBookTest extends Test {
    public AddressBookTest() {
    	  forkEvery = 1
        systemProperty 'testfx.setup.timeout', '60000'
    }

    public void setHeadless() {
        systemProperty 'java.awt.robot', 'true'
        systemProperty 'testfx.robot', 'glass'
        systemProperty 'testfx.headless', 'true'
        systemProperty 'prism.order', 'sw'
        systemProperty 'prism.text', 't2k'
    }
}

task guiTests(type: AddressBookTest) {
    include 'guitests/**'
    jacoco {
        destinationFile = new File("${buildDir}/jacoco/test.exec")
    }
}

task guiUnitTests(type: AddressBookTest) {
    include 'guiunittests/**'
    jacoco {
        destinationFile = new File("${buildDir}/jacoco/test.exec")
    }
}

task unitTests(type: AddressBookTest) {
    include 'address/**'
    jacoco {
        destinationFile = new File("${buildDir}/jacoco/test.exec")
    }
}

task allTests(type: AddressBookTest) {
    jacoco {
        destinationFile = new File("${buildDir}/jacoco/test.exec")
    }
}

task headless << {
    println "Setting headless mode properties."
    guiTests.setHeadless()
    guiUnitTests.setHeadless()
    unitTests.setHeadless()
    allTests.setHeadless()
}

// Makes sure that headless properties are set before running tests
unitTests.mustRunAfter headless
guiUnitTests.mustRunAfter headless
guiTests.mustRunAfter headless
allTests.mustRunAfter headless

headless.shouldRunAfter checkStyle
unitTests.shouldRunAfter checkStyle
guiUnitTests.shouldRunAfter checkStyle
guiTests.shouldRunAfter checkStyle
allTests.shouldRunAfter checkStyle

checkStyle.shouldRunAfter clean
checkStyle.dependsOn checkstyleMain, checkstyleTest, findbugsMain, findbugsTest, pmdMain, pmdTest

defaultTasks 'clean', 'headless', 'allTests', 'coverage'
