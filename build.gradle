/*
 * Gradle Configuration File
 *
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.2.1/userguide/tutorial_java_projects.html
 */

allprojects {

    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    checkstyle {
        toolVersion = '6.7'
    }
    apply plugin: 'pmd'
    apply plugin: 'findbugs'
    findbugs {
        excludeFilter = file("${projectDir}/config/findbugs/excludeFilter.xml")
    }
    apply plugin: 'jacoco'

    version = '3.27.0'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://repo.eclipse.org/content/repositories/egit-releases/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "http://maven.teamdev.com/repository/products" }
    }

    project.ext {
        log4jVersion = '2.3'
        controlsfxVersion = '8.40.10'
        jacksonVersion = '2.7.0'
        jacksonDataTypeVersion = '2.7.4'
        guavaVersion = '19.0'
        junitVersion = '4.12'
        testFxVersion = '3.1.0'
        mockitoVersion = '1+'
        mockServerVersion = '3.10.1'
        jxBrowserVersion = '6.4'
        controlsFxVersion = '8.40.10'

        outputDir = 'build/libs'
        mainAppArchiveName = 'addressbook.jar'
        jarUpdaterArchiveName = 'jarUpdater.jar'
    }

    dependencies {
        compile "org.apache.logging.log4j:log4j-api:$log4jVersion"
        compile "org.apache.logging.log4j:log4j-core:$log4jVersion"
        compile 'commons-io:commons-io:2.4'
        compile "org.controlsfx:controlsfx:$controlsfxVersion"
        compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonDataTypeVersion"
        compile "com.google.guava:guava:$guavaVersion"
        compile "com.teamdev.jxbrowser:jxbrowser-win:$jxBrowserVersion"
        compile "com.teamdev.jxbrowser:jxbrowser-mac:$jxBrowserVersion"
        compile "com.teamdev.jxbrowser:jxbrowser-linux32:$jxBrowserVersion"
        compile "com.teamdev.jxbrowser:jxbrowser-linux64:$jxBrowserVersion"
        compile "org.controlsfx:controlsfx:$controlsFxVersion"
        compile fileTree(dir: 'lib', include: 'license.jar')

        testCompile "junit:junit:$junitVersion"
        testCompile "org.testfx:testfx-core:4.0.+"
        testCompile "org.testfx:testfx-junit:4.0.+"
        testCompile "org.testfx:testfx-legacy:4.0.+", {
            exclude group: "junit", module: "junit"
        }
        testCompile "org.mockito:mockito-core:$mockitoVersion"
        testCompile group: "org.mock-server", name: "mockserver-netty", version: "$mockServerVersion"
        testCompile 'org.testfx:openjfx-monocle:1.8.0_20'
    }

    task createJarUpdater(type: Jar) {
        group = "Release"

        manifest {
            attributes 'Implementation-Title': 'Jar Updater',
                    'Implementation-Version': '1.0',
                    'Main-Class': 'address.updater.JarUpdater',
                    // Add required JAR libraries into classpath
                    'Class-Path': configurations.runtime.files.collect { "../lib/${it.name}" }.join(" ")
        }

        archiveName = project.ext.jarUpdaterArchiveName
        destinationDir = file('src/main/resources/updater')

        // Specify classes needed for Jar Updater
        from sourceSets.main.output
        include('address/updater/JarUpdater.class')
        include('address/util/FileUtil.class')
        include('address/updater/LocalUpdateSpecificationHelper.class')
    }

    task copyDependencyLibrariesToReleaseDir(type: Copy) {
        group = "Release"

        from configurations.compile
        into project.ext.outputDir + '/lib'
    }

    task addJarUpdaterToMainApp(type: Copy) {
        group = "Release"
        from(sourceSets.main.resources.srcDirs) {
            include 'updater/jarUpdater.jar'
        }
        into sourceSets.main.output.resourcesDir
    }

    addJarUpdaterToMainApp.dependsOn createJarUpdater

    jar {
        manifest {
            attributes 'Main-Class': 'address.MainApp',
                    // Add required JAR libraries into classpath
                    'Class-Path': configurations.runtime.files.collect { "lib/${it.name}" }.join(" ")

        }
        archiveName = project.ext.mainAppArchiveName
    }

    jar.dependsOn copyDependencyLibrariesToReleaseDir
    jar.dependsOn addJarUpdaterToMainApp


    task createMainAppExecutable(dependsOn: jar) {
        group = "Release"

        doLast {
            println "A guide to create a release (after running this task)"
            println "====================================================="
            println "(temp) to enable update, put UpdateData.json into update/ of the main executable"
        }
    }

    createMainAppExecutable.dependsOn clean

    sourceSets {
        installer {
            java {
                srcDir 'src/main/java/'
                include('installer/**/*')
                include('address/util/FileUtil.java')
                include('address/util/OsDetector.java')
            }
            resources {
                srcDir project.ext.outputDir
                include(project.ext.mainAppArchiveName)
                include('lib/*')
                exclude('lib/jxbrowser?*-6.4.jar')
            }
        }
    }

    task createInstallerJar(type: Jar) {
        group = "Release"

        from sourceSets.installer.output

        manifest {
            attributes 'Implementation-Title': 'Addressbook',
                    'Implementation-Version': '1.0',
                    'Main-Class': 'installer.Installer'
        }

        archiveName = "addressbook.jar"
    }

    createInstallerJar.dependsOn createMainAppExecutable
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task coverage {
}
task checkStyle {
}

test {
    forkEvery = 1
    systemProperty 'testfx.setup.timeout', '60000'
}

task headless(type: Test) {
    systemProperty 'java.awt.robot', 'true'
    systemProperty 'testfx.robot', 'glass'
    systemProperty 'testfx.headless', 'true'
    systemProperty 'prism.order', 'sw'
    systemProperty 'prism.text', 't2k'
    jacoco {
        destinationFile = new File("${buildDir}/jacoco/test.exec")
    }
}

task headful(type: Test) {
    jacoco {
        destinationFile = new File("${buildDir}/jacoco/test.exec")
    }
}

headless.shouldRunAfter checkStyle
headful.shouldRunAfter checkStyle
checkStyle.shouldRunAfter clean
checkStyle.dependsOn checkstyleMain, checkstyleTest, findbugsMain, findbugsTest, pmdMain, pmdTest
coverage.dependsOn jacocoTestReport

defaultTasks 'clean', 'headless'
