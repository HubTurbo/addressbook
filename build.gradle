/*
 * Gradle Configuration File
 *
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.2.1/userguide/tutorial_java_projects.html
 */

plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

allprojects {

    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    checkstyle {
        toolVersion = '6.7'
    }
    apply plugin: 'pmd'
    apply plugin: 'findbugs'
    findbugs {
        excludeFilter = file("${projectDir}/config/findbugs/excludeFilter.xml")
    }

    version = '3.27.0'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://repo.eclipse.org/content/repositories/egit-releases/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "http://maven.teamdev.com/repository/products" }
    }

    project.ext {
        log4jVersion = '2.3'
        controlsfxVersion = '8.40.10'
        gsonVersion = '2.3.1'
        guavaVersion = '19.0'
        junitVersion = '4.12'
        testFxVersion = '3.1.0'
        mockitoVersion = '1+'
        mockServerVersion = '3.10.1'
        jxBrowserVersion = '6.4'
    }

    dependencies {
        compile "org.apache.logging.log4j:log4j-api:$log4jVersion"
        compile "org.apache.logging.log4j:log4j-core:$log4jVersion"
        compile 'commons-io:commons-io:2.4'
        compile "org.controlsfx:controlsfx:$controlsfxVersion"
        compile "com.google.code.gson:gson:$gsonVersion"
        compile "com.google.guava:guava:$guavaVersion"
        compile "com.teamdev.jxbrowser:jxbrowser-win:$jxBrowserVersion"
        compile "com.teamdev.jxbrowser:jxbrowser-mac:$jxBrowserVersion"
        compile "com.teamdev.jxbrowser:jxbrowser-linux32:$jxBrowserVersion"
        compile "com.teamdev.jxbrowser:jxbrowser-linux64:$jxBrowserVersion"
        testCompile "junit:junit:$junitVersion"
        testCompile "org.testfx:testfx-core:4.0.+"
        testCompile "org.testfx:testfx-junit:4.0.+"
        testCompile "org.testfx:testfx-legacy:4.0.+", {
            exclude group: "junit", module: "junit"
        }
        testCompile "org.mockito:mockito-core:$mockitoVersion"
        testCompile group: "org.mock-server", name: "mockserver-netty", version: "$mockServerVersion"
        testCompile 'org.testfx:openjfx-monocle:1.8.0_20'
        compile fileTree(dir: 'lib', include: 'license.jar')
    }

    jar {
        manifest {
            attributes 'Main-Class': 'address.MainApp',
                    'Class-Path': configurations.runtime.files.collect { "lib/${it.name}" }.join(" ")
        }
        archiveName = 'addressbook.jar'
    }

    assemble.dependsOn shadowJar
}

task createARelease {
    group = "Compiling and Release"

    doFirst {
        println "A guide to create a release (to be automated)"
        println "============================================="
        println "1. Run compileJarUpdater - under compiling and release"
        println "2. Run jar - under build"
        println "3. Run copyDep - under compiling and release"
        println "4. Release includes addressbook.jar and the lib folder in build/libs"
        println "(temp) to enable update, put UpdateData.xml into build/libs/update"
    }
}

task copyDep(type: Copy) {
    group = "Compiling and Release"

    from configurations.compile
    into 'build/libs/lib'
}

task compileJarUpdater(type: Jar) {
    group = "Compiling and Release"

    manifest{
        attributes 'Implementation-Title': 'Jar Updater',
                'Implementation-Version': '1.0',
                'Main-Class': 'address.updater.JarUpdater',
                'Class-Path': configurations.runtime.files.collect { "../lib/${it.name}" }.join(" ")
    }
    archiveName = 'jarUpdater'
    destinationDir = file('src/main/resources/updater')

    with jar

    from sourceSets.main.output
    include('address/updater/JarUpdater.class')
    include('address/util/FileUtil.class')
    include('address/updater/LocalUpdateSpecificationHelper.class')
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

test {
    forkEvery = 1
}

task headless(type: Test) {
    systemProperty 'testfx.robot', 'glass'
    systemProperty 'testfx.headless', 'true'
    systemProperty 'prism.order', 'sw'
    systemProperty 'prism.text', 't2k'
    forkEvery = 1
}

defaultTasks 'checkstyleMain', 'checkstyleTest', 'findbugsMain', 'findbugsTest', 'pmdMain', 'pmdTest', 'headless', 'clean'
